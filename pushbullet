#! /bin/bash

# Bash interface to the PushBullet api.
# Author: Red5d - https://github.com/Red5d

API_URL=https://api.pushbullet.com/v2
PROGDIR="$(cd "$( dirname "$0" )" && pwd )"
unset QUIET

CURLOPTS="--silent"

info() {
	if [[ -z ${QUIET} ]]; then
		echo "$@"
	fi
}

err() {
	if [[ -w /dev/stderr ]]; then
		echo "$@" > /dev/stderr
	else
		# /dev/stderr does not exist or is not writable
		echo "$@"
	fi
}

if [ ! "$(which curl)" ]; then
	err "pushbullet-bash requires curl to run. Please install curl."
	exit 1
fi

if [ ! -e "$PROGDIR"/JSON.sh ]; then
	err "Not all required libraries are installed. Please change into the pushbullet-bash folder and run the following command:"
	err "git submodule init && git submodule update"
	exit
fi

# use default PB_CONFIG if no different file or API key has been given
if [[ ! -n "$PB_CONFIG" ]] && [[ ! -n "$PB_API_KEY" ]]; then
	PB_CONFIG=~/.config/pushbullet
fi
source $PB_CONFIG > /dev/null 2>&1

# don't give warning when script is called with setup option
if [[ -z "$PB_API_KEY" ]] && [[ "$1" != "setup" ]]; then
	err -e "\e[0;33mWarning, your API key is not set.\nPlease create \"$PB_CONFIG\" with a line starting with PB_API_KEY= and your PushBullet key\e[00m"
	exit 1
fi

# from here on set -e to avoid "EXPECTED value GOT EOF" errors from JSON.sh when no pushes are returned
set -e

printUsage() {
echo "Usage: pushbullet [-q|--quiet|-d|--debug] <action> <device> <type> <data>

Options:
-q, --quiet - only print error messages.
-d, --debug - print debug output

Actions:
list - List all devices and contacts in your PushBullet account. (does not require
       additional parameters)
push - Push data to a device or contact. (the device name can simply be
       a unique part of the name that \"list\" returns)
pushes active - List your 'active' pushes (pushes that haven't been deleted).
       Format is: iden:type:title:modified
pushes recent - List all of your 'active' pushes since the last run.
pushes last24h - List 'active' pushes from the last 24 hours.
delete \$iden - Delete a specific push.
delete except \$number - Delete all pushes except the last \$number.
delete all - Delete all pushes.
pull \$iden - Display a specific push.
setup - Use OAuth to retrieve a PushBullet API key for pushbullet-bash.
create-device - create a device in pushbullet named like the current hostname.
chat create \$email - create a chat with the passed email. Does not send a message.

Types:
note
link
file

Type Parameters:
(all parameters must be put inside quotes if more than one word)
\"note\" type: 	give the title and an optional message body.
\"link\" type: 	give an optional title, an optional message and the url. The optional message can also be given last.
\"file\" type: 	give the path to the file and an optional message body.
Hint:  The message body can also be given via stdin, leaving the message parameter empty.
"
exit 1
}

function getactivepushes () {
	# first command in a function reads stdin
	allpushes=$("$PROGDIR"/JSON.sh -b)
	activepushes=$(echo "$allpushes" | egrep "\"pushes\",[0-9]+,\"active\"\].*true" \
	| while read line; do id=${line%,*}; echo $id; done)
	for id in $activepushes; do
		# use grep -F to not interpred ] (which is also stored in $id)
		iden=$(echo "$allpushes" | grep -F "$id,\"iden\"]" |cut -f 2)
		title=$(echo "$allpushes" | grep -F "$id,\"title\"]"|cut -f 2)
		modified=$(echo "$allpushes" | grep -F "$id,\"modified\"]" |cut -f 2)
		type=$(echo "$allpushes" | grep -F "$id,\"type\"]" |cut -f 2)

		# set title if none is stored
		title=${title:-"(no title)"}

		echo "$iden:$type:$title:$modified"
	done
}

checkCurlOutput() {
	res=$(echo "$1" | grep -o "created" | tail -n1)
	if [[ "$1" == *"The param 'channel_tag' has an invalid value."* ]] && [[ "$1" == *"The param 'device_iden' has an invalid value."* ]]; then
		err "Error: You specified an unknown device or channel."
		exit 1
	elif [[ "$1" == *"invalid_access_token"* ]]; then
		err "Access token is missing or invalid."
		exit 1
	elif [[ "$1" == *"Object not found"* ]]; then
		err "Object not found"
		exit 1
	elif [[ "$1" == '{"accounts":[],"blocks":[],"channels":[],"chats":[],"clients":[],"contacts":[],"devices":[],"grants":[],"pushes":[],"profiles":[],"subscriptions":[],"texts":[]}' ]]; then
		# "empty" response
		return 0
	elif [[ "$1" == '{"accounts":[],"blocks":[],"channels":[],"chats":[],"clients":[],"contacts":[],"devices":[],"grants":[],"pushes":[],"profiles":[],"subscriptions":[],"texts":[],"cursor":'* ]]; then
		# only next cursor, otherwise empty response
		# suppress error when calling break outside of loop
		break 2&> /dev/null
	elif [[ "$res" != "created" ]] && [[ ! "$1" == "{}" ]]; then
		err "Error submitting the request. The error message was:" "$1"
		exit 1
	fi
}

# function prints the cursor function if another page is needed
checkPagination() {
	cursor=$(echo "$1" | tr ',' '\n' | grep \"cursor\": | cut -d '"' -f4)
	echo "$cursor"
}

getChats() {
	curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
	"$API_URL/chats")

	# check if query needs pagination
	chats=$curlres
	cursor=$(checkPagination "$curlres")
	until [ -z $cursor ]; do
		curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
		--data-urlencode cursor=$cursor \
		--get \
		"$API_URL/chats")
		chats="$chats $curlres"
		cursor=$(checkPagination "$curlres")
	done
	echo "$chats"
}

getDevices() {
	curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
	"$API_URL/devices")

	# fail early on if token is invalid
	checkCurlOutput "$curlres"

	# check if query needs pagination
	devices=$curlres
	cursor=$(checkPagination "$curlres")
	until [ -z $cursor ]; do
		curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
		--data-urlencode cursor=$cursor \
		--get \
		"$API_URL/devices")
		devices="$devices $curlres"
		cursor=$(checkPagination "$curlres")
	done
	echo "$devices"
}

getPushes() {
	# function gets a list of pushes (as a json object)
	local OPTIND
	while getopts ":a:i:m:" OPTION; do
		case "$OPTION" in
		a)
			active="$OPTARG"
			;;
		i)
			iden="$OPTARG"
			;;
		m)
			modified="$OPTARG"
			;;
		esac
	done
	shift $((OPTIND-1))

	# default to true to only get active pushes if not set otherwise
	active=${active:-true}

	# default to 0 to get all pushes if not set otherwise
	modified=${modified:-0}

	# if $iden is set, add leading slash
	if [ ! -z "$iden" ]; then
		iden="/$iden"
	fi

	curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
	--data-urlencode active="$active" \
	--data-urlencode modified_after="$modified" \
	--get \
	"$API_URL/pushes$iden")
	checkCurlOutput "$curlres"
	response="[ $curlres"

	# check if query needs pagination
	until [ -z "$(checkPagination "$curlres")" ]; do
		curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
		--data-urlencode active="$active" \
		--data-urlencode modified_after="$modified" \
		--data-urlencode cursor="$(checkPagination "$curlres")" \
		--get \
		"$API_URL/pushes$iden")
		response="$response, $curlres"
		# checkCurlOutput will call break once no new pushes are received
		checkCurlOutput "$curlres"
	done
	echo "$response ]"
}

case $1 in
-q|--quiet)
	QUIET=1
	shift
	;;
-d|--debug)
	set -x
	shift
	;;
esac

case $1 in
create-device)
	# create a device in pushbullet named like the current hostname
	if [ ! -z $("$0" list | grep -Fx "$(hostname)") ]; then
		err "A device already exists with your hostname"
		exit 1
	fi
	curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
	--header 'Content-Type: application/json' \
	--data-binary "{\"nickname\":\"$(hostname)\",\"model\":\"Created by pushbullet-bash\",\"icon\":\"system\"}" \
	--request POST \
	"$API_URL/devices")
	checkCurlOutput "$curlres"
	info "Device has been created"
	;;
list)
	info "Available devices:"
	info "------------------"
	devices=$(getDevices)
	echo "$devices" | tr ',' '\n' | grep \"nickname\": | sort -n | cut -d '"' -f4
	info "all"
	info

	info "Chats/Contacts:"
	info "------------------"
	chats=$(getChats)
	echo "$chats" | tr ',' '\n' | grep \"email\": | cut -d '"' -f4 | sort -n
	;;
chat)
	case $2 in
	create)
		# create a chat with the email in $3 so that the address shows up in the list command
		if [[ ! "$3" == *@* ]]; then
			err "$3 is no email address"
			exit 1
		fi
		# as long as the object is an email the chat will either be created or already exists
		curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
		--header "Content-Type: application/json" \
		--data-binary \{\"email\":\"$3\"\} \
		--request POST \
		"$API_URL/chats")
		;;
	*)
		printUsage
		;;
	esac
	;;
pushes)
	case $2 in
	active)
		info "Your active pushes:"
		info "------------------"
		getPushes | getactivepushes
		;;
	recent)
		# set LASTMODIFIED (unix time) to zero if empty
		if [ -z "$PB_LASTMODIFIED" ]; then
			PB_LASTMODIFIED=0
			echo "PB_LASTMODIFIED=0" >> $PB_CONFIG
		fi
		info "Your recent pushes:"
		info "------------------"
		pushes=$(getPushes -m $PB_LASTMODIFIED | getactivepushes)
		echo "$pushes"
		# get the modififed timestamp of the newest push
		pushes=$(echo "$pushes" | head -n 1)
		modified=${pushes##*:}
		# only update PB_LASTMODIFIED if $modified has a value
		if [ ! -z $modified ]; then
			sed --follow-symlinks -i "s/^PB_LASTMODIFIED=.*/PB_LASTMODIFIED=$modified/" $PB_CONFIG
		fi
		;;
	last24h)
		info "Your pushes from the last 24 hours:"
		info "------------------"
		getPushes -m $(date -d "1 day ago" +%s) | getactivepushes
		;;
	*)
		printUsage
		;;
	esac
	;;
delete)
	case $2 in
	"")
		printUsage
		;;
	all)
		info "deleting all pushes"
		curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
		--request DELETE \
		"$API_URL/pushes")
		checkCurlOutput "$curlres"
		;;
	except)
		# test if $3 is not empty and a number
		if [ -z "${3##*[!0-9]}" ]; then
			printUsage
		fi
		info "deleting all pushes except the last $3"
		number=$(($3+1))
		while read line; do
			iden=${line%%:*}
			# call pushbullet-bash itself to delete the pushes
			# use tr to remove quotes around iden
			$0 delete $(echo "$iden" | tr -d '"')
		# pushes are always displayed with the newest first. By tailing the output we skip the newest $number
		done < <(getPushes | getactivepushes | tail -n "+$number")
		;;
	*)
		info "deleting $2"
		curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
		--request DELETE \
		"$API_URL/pushes/$2")
		checkCurlOutput "$curlres"
		;;
	esac
	;;
pull)
	case $2 in
	"")
		printUsage
		;;
	*)
		getPushes -i $2 | "$PROGDIR"/JSON.sh -b
		;;
	esac
	;;
push)
	if [ -z "$2" ]; then
		printUsage
	fi

	# get device listing
	curlres=$(getDevices)

	devices=$(echo "$curlres" | tr '{' '\n' | tr ',' '\n' | grep \"nickname\" | cut -d'"' -f4)
	idens=$(echo "$curlres" | tr '{' '\n' | grep active\"\:true | tr ',' '\n' | grep iden | cut -d'"' -f4)
	lineNum=$(echo "$devices" | grep -i -n "$2" | cut -d: -f1)
	dev_id=$(echo "$idens" | sed -n $lineNum'p')
	dev_name=$(echo "$devices" | sed -n $lineNum'p')

	title="$4"
	body=""
	if [ ! -t 0 ]; then
		# we have something on stdin
		body=$(cat)
		# remove unprintable characters, or pushbullet API fails
		body=$(echo "$body"|tr -dc '[:print:]\n'|tr '"' "'")
	fi

	if [[ $4 == http://* ]] || [[ $4 == https://* ]]; then
		body=${body:-$5}
		url="$4"
	elif [[ $5 == http://* ]] || [[ $5 == https://* ]]; then
		body=${body:-$6}
		url="$5"
	else
		body=${body:-$5}
		url="$6"
	fi

	# replace newlines with an escape sequence
	body="${body//$'\n'/\\n}"

	case $3 in
	note)
		type=note
		json="{\"type\":\"$type\",\"title\":\"$title\",\"body\":\"$body\""
	;;
	link)
		type=link
		if [[ ! $url == http://* ]] && [[ ! $url == https://* ]]; then
			err "Error: A valid link has to start with http:// or https://"
			exit 1
		fi
		json="{\"type\":\"$type\",\"title\":\"$title\",\"body\":\"$body\",\"url\":\"$url\""
	;;
	file)
		file=$4
		if [[ -d $file ]]; then
			info "Given file is actually a folder, compressing it first"
			archivename="$(date +%s)"
			tar cfz /tmp/"$archivename.tar.gz" "$file"
			file=/tmp/"$archivename.tar.gz"
		fi
		if [[ -z $file ]] || [[ ! -f $file ]]; then
			err "Error: no valid file to push was specified"
			exit 1
		fi
		# Api docs: https://docs.pushbullet.com/v2/upload-request/
		mimetype=$(file -i -b "$file")
		curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
		--header "Content-Type: application/json" \
		--data-binary "{\"file_name\":\"$file\",\"file_type\":\"${mimetype%:*}\"}" \
		--request POST \
		"$API_URL/upload-request")
		curlres2=$(curl $CURLOPTS --include --request POST \
		$(echo "$curlres" | "$PROGDIR"/JSON.sh -b | grep upload_url | awk -F\" '{print $(NF-1)}') \
		-F file=@"$file")

		type=file
		file_name=$(echo "$curlres" | "$PROGDIR"/JSON.sh -b | grep file_name |awk -F\" '{print $(NF-1)}')
		file_type=$(echo "$curlres" | "$PROGDIR"/JSON.sh -b | grep file_type |awk -F\" '{print $(NF-1)}')
		file_url=$(echo "$curlres" | "$PROGDIR"/JSON.sh -b | grep file_url |awk -F\" '{print $(NF-1)}')
		json="{\"type\":\"$type\",\"title\":\"$title\",\"body\":\"$body\",\"file_name\":\"$file_name\",\"file_type\":\"$file_type\",\"file_url\":\"$file_url\""
	;;
	*)
		printUsage
	;;
	esac

	if [ "$2" = "all" ]; then
		info "Sending to All Devices"
		json="$json}"
	# $2 must be a contact/an email address if it contains an @.
	elif [[ "$2" == *@* ]]; then
		info "Sending to email address $2"
		json="$json,\"email\":\"$2\"}"
		# since it's an email we are also creating a chat
		$0 chat create "$2"
	# $2 must be a channel_tag if $lineNum is empty.
	elif [ -z "$lineNum" ]; then
		info "Sending to channel $2"
		json="$json,\"channel_tag\":\"$2\"}"
	# in all other cases $2 must be the identifier of a device.
	else
		info "Sending to device $dev_name"
		json="$json,\"device_iden\":\"$dev_id\"}"
	fi
	curlres=$(curl $CURLOPTS --header "Access-Token: $PB_API_KEY" \
	--header "Content-type: application/json" \
	--data-binary "$json" \
	--request POST \
	"$API_URL/pushes")
	checkCurlOutput "$curlres"
;;
setup)
	CLIENT_ID=RP56dyRen86HaaLnXBevnrDTHT8fTcr6
	REDIRECT_URI="https://Red5d.github.io/pushbullet-bash"
	OAUTH_URL="https://www.pushbullet.com/authorize?client_id=$CLIENT_ID&redirect_uri=$REDIRECT_URI&response_type=token&scope=everything"
	info
	info "Please open the following URL manually if it did not open automatically:"
	info
	echo "$OAUTH_URL"
	info
	info "Before continuing you need to save your newly created token in $PB_CONFIG"

	if [ "$(uname)" == "Darwin" ]; then
		open "$OAUTH_URL"
	else
		xdg-open "$OAUTH_URL" &> /dev/null
	fi
;;
ratelimit)
	curl --header "Access-Token: $PB_API_KEY" \
	--include \
	"$API_URL/users/me"
	echo
;;
*)
	printUsage
;;
esac
